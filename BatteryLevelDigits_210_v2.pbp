; Always display current battery level in statusbar.
;
; Note that this patch might slightly increase battery consumption
; (though not much more than regular watchface/app showing battery state).

; Options:
; battery_icon_stock - to show stock icon (if any) in addition to percentage
; battery_no_digits - to disable digital battery level display
#default battery_text_field_width 16 ; was: 11 (or 14 w/o field)

00 BF ?4 ?4 @
1F B5 ?4  8D F8 00 00  C0 F3 07 23 C0 F3 07 40
8D F8 02 00 8D F8 01 30  00 9B 00 20 {
	proc battery_state_service_peek
}
0C B4 7F B5 08 9A 05 46 {
	proc snprintf
}
F8 B5 00 AF 04 46 {
	proc fonts_get_system_font
}
82 B0 F0 B5 0E 46 91 B0 {
	proc graphics_draw_text
}
"RESOURCE_ID_GOTHIC_14" 00 {
	proc res_id_gothic_14
}
03 4b 1b 78 13 b1 03 4b {
	proc is_vibro_disabled
}

#ifdef battery_icon_stock
; This matches middle of status_bar_draw procedure,
; the part responsible for determining desired
; battery level icon and drawing it if needed.
;
; prev: launch custom drawing proc if needed
2B 68 73 B1 20 46 00 21  ?4 14 4B 20 46
19 68 06 22 8D 23 ?4        C0 F1 88 00
05 46 00 E0 8D 25
; next: BL is_vibro_disabled
{
	B.W my_code
	; Skip unneeded now code to position label correctly
	DCB "SkipSkipSkipSkipSkipSkipSkipSkip"
	global continue
}
#else
; Use the same mask, but place call after its end
; prev: launch custom drawing proc if needed
; here: draw battery icon if any, and place offset to R5
2B 68 73 B1 20 46 00 21  ?4 14 4B 20 46
19 68 06 22 8D 23 ?4        C0 F1 88 00
05 46 00 E0 8D 25
@ ?4
{
	; was: BL is_vibro_disabled
	B.W my_code
	global continue
}
#endif

; Place our code to floating block
{
	proc my_code

#ifdef battery_icon_stock
	MOV R5, 141 ; initialize offset: there was no battery icon, so just retain few pixel field
#endif
	; else - it was initialized when stock icon was (or wasn't) drawn

#ifndef battery_no_digits
	BL battery_state_service_peek ; FIXME: doing this at every redraw might be power-consuming?
	; now R0 contains a BatteryChargeState structure:
	; 00 . is_plugged . is_charging . percent
	UXTB R0, R0 ; just throw away charging info for now
	MOV R3, R0
	ADD R0, SP,16 ; use free space in stack (max is 0x24=36; for this string maximum is 20 chars)
	MOV R1, 5 ; buffer size
	ADR R2, format
	BL snprintf
	; now we have complete "nn%" string at [SP+12]
	LDR R0, fontname
	BL fonts_get_system_font
	MOV R2, R0 ; font
	MOV R0, 0
	STR R0, [SP,4] ; overflow_mode
	STR R0, [SP,8] ; alignment
	STR R0, [SP,12] ; layout
	MOV R0, R4 ; ctx
	ADD R1, SP,16 ; text
	MOV R3, ${battery_text_field_width}
	ADD R3, 0x000E0000 ; height: 0xE = 14 = statusbar height
	STR R3, [SP] ; box_2
	SUB R3, R5, ${battery_text_field_width} ; offset from the right - field width
	ADD R3, 0xFFFF0000 # y: -1
	; now R3 is box_1
	BL graphics_draw_text
	SUB R5, ${battery_text_field_width} ; hold that space from other icons
	SUB R5, 2 ; and hold some more space (field)
#endif

#ifndef battery_icon_stock
	BL is_vibro_disabled ; restore overwritten code
#endif
	B.W continue

	; data block
	ALIGN 4
	fontname:
	DCD res_id_gothic_14
	format:
	DCB "%d" 00
}
